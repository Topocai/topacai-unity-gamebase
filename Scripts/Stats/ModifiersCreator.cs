using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEditor;
using UnityEngine;

namespace Topacai.StatsSystem
{
    public struct ModifierConfig<T>
    {
        public ModifierOperation ModifierType;
        public T ModifierValue;
        public string Name;
        public float Duration;
    }

#if UNITY_EDITOR

    [CustomEditor(typeof(MultipleModifiersCreatorSO))]
    public class MultipleModifiersCreatorEditor : Editor
    {
        private int fieldIndex = 0;
        private float durationSelected = 0f;
        private ModifierOperation modifierTypeSelected;

        private int intModifierValueSelected = 0;
        private float floatModifierValueSelected = 0f;
        private bool boolModifierValueSelected = false;

        private readonly Type[] supportedTypes = { typeof(int), typeof(float), typeof(bool) };

        #region Styling

        /// 
        /// Keep in mind that all style code are generated by IA, the main code logic for this editor was created before
        /// the style was introduced to the editor.
        /// 

        private GUIStyle headerStyle;
        private GUIStyle boxStyle;
        private GUIStyle labelStyle;
        private GUIStyle subHeaderStyle;
        private void InitStyles()
        {
            if (headerStyle == null)
            {
                headerStyle = new GUIStyle(EditorStyles.boldLabel)
                {
                    alignment = TextAnchor.MiddleCenter,
                    fontSize = 14,
                    normal = { textColor = new Color(0.85f, 0.85f, 1f) }
                };

                subHeaderStyle = new GUIStyle(EditorStyles.boldLabel)
                {
                    fontSize = 12,
                    normal = { textColor = new Color(0.8f, 0.9f, 1f) }
                };

                labelStyle = new GUIStyle(EditorStyles.label)
                {
                    wordWrap = true
                };

                boxStyle = new GUIStyle("HelpBox")
                {
                    padding = new RectOffset(10, 10, 8, 8),
                    margin = new RectOffset(5, 5, 5, 5)
                };
            }
        }

        private void DrawSeparator()
        {
            GUILayout.Space(6);
            var rect = EditorGUILayout.GetControlRect(false, 1);
            EditorGUI.DrawRect(rect, new Color(0.3f, 0.3f, 0.3f));
            GUILayout.Space(6);
        }

        #endregion

        public override void OnInspectorGUI()
        {
            InitStyles();

            var creator = (MultipleModifiersCreatorSO)target;
            if (creator == null) return;

            // === Header ===
            EditorGUILayout.Space(8);
            
            GUILayout.BeginVertical(boxStyle);
            GUILayout.Label("⚙️ Multiple Modifiers Creator", headerStyle);
            GUILayout.EndVertical();

            EditorGUILayout.Space(8);

            // === Script reference ===
            DrawDefaultInspector();

            var scriptObject = creator.ScriptObject;

            if (scriptObject == null)
            {
                EditorGUILayout.HelpBox("Assign a MonoScript with a main class as an object data (struct or class) that contains int, float or bool to create modifiers.", MessageType.Info);
                return;
            }

            // === Existing Modifiers ===
            EditorGUILayout.LabelField("🧩 Current Modifiers", subHeaderStyle);
            EditorGUILayout.Space(4);

            if (!creator.Modifiers.Any())
            {
                EditorGUILayout.HelpBox("No modifiers created yet.", MessageType.None);
            }
            else
            {
                DrawModifiersList(creator);
            }

            EditorGUILayout.Space(10);
            DrawSeparator();

            // === Add New Modifier ===
            EditorGUILayout.Space(6);
            EditorGUILayout.LabelField("➕ Add New Modifier", subHeaderStyle);
            EditorGUILayout.Space(6);

            DrawModifierAdder(scriptObject, creator);

            EditorGUILayout.Space(10);
        }

        private void DrawModifiersList(MultipleModifiersCreatorSO creator)
        {
            foreach (var modifier in creator.Modifiers.ToList())
            {
                EditorGUILayout.BeginVertical(EditorStyles.helpBox);

                if (modifier is ConfigurableModifier<float> f)
                    DrawConfigurableModifier(f);
                else if (modifier is ConfigurableModifier<int> i)
                    DrawConfigurableModifier(i);
                else if (modifier is ConfigurableModifier<bool> b)
                    DrawConfigurableModifier(b);
                else
                    DrawBaseModifier(modifier);

                GUILayout.Space(4);
                if (GUILayout.Button("🗑 Remove Modifier", GUILayout.Height(22)))
                {
                    creator.RemoveStatModifier(modifier);
                    GUIUtility.ExitGUI();
                }

                EditorGUILayout.EndVertical();
                GUILayout.Space(5);
            }
        }

        private string GetTypeString(Type type) => type?.Name ?? "Unknown Type";
        private string GetDurationString(float duration) => duration > 0 ? $"{duration}s" : "Permanent";

        private void DrawBaseModifier(StatModifier modifier)
        {
            string typeName = GetTypeString(modifier.GetStatType());
            string durationString = GetDurationString(modifier.Duration);
            GUILayout.Label($"{modifier.ToString()} ({typeName}, {durationString})", labelStyle);
        }

        private bool DrawConfigurableModifier<T>(ConfigurableModifier<T> modifier)
        {
            if (modifier == null) return false;

            string typeName = GetTypeString(modifier.GetStatType());
            string durationString = GetDurationString(modifier.Duration);

            string opSymbol = modifier.operationType switch
            {
                ModifierOperation.Add => "+",
                ModifierOperation.Multiply => "×",
                ModifierOperation.Subtract => "-",
                _ => "?"
            };

            GUILayout.Label($"{modifier.StatName} ({typeName}) — {durationString}", labelStyle);
            EditorGUILayout.LabelField($"Operation: {opSymbol} {modifier.ModifierValue}");

            return true;
        }

        private void DrawModifierAdder(Type objectType, MultipleModifiersCreatorSO creator)
        {
            // Get all fields of the script that are int, float, or bool (from supportedTypes array)
            var fields = objectType.GetFields().Where(f => supportedTypes.Contains(f.FieldType)).ToArray();

            if (fields.Length == 0)
            {
                EditorGUILayout.HelpBox("No valid fields found in this script. Must contain int, float, or bool fields.", MessageType.Warning);
                return;
            }

            string[] fieldNames = fields.Select(f => f.Name).ToArray();

            fieldIndex = EditorGUILayout.Popup("Field", fieldIndex, fieldNames);
            durationSelected = EditorGUILayout.FloatField("Duration", durationSelected);
            modifierTypeSelected = (ModifierOperation)EditorGUILayout.EnumPopup("Operation", modifierTypeSelected);

            var field = fields[fieldIndex];
            var fieldType = field.FieldType;

            if (fieldType == typeof(int))
                intModifierValueSelected = EditorGUILayout.IntField("Value", intModifierValueSelected);
            else if (fieldType == typeof(float))
                floatModifierValueSelected = EditorGUILayout.FloatField("Value", floatModifierValueSelected);
            else if (fieldType == typeof(bool))
                boolModifierValueSelected = EditorGUILayout.Toggle("Value", boolModifierValueSelected);

            EditorGUILayout.Space(8);

            if (GUILayout.Button("✅ Add Modifier", GUILayout.Height(25)))
            {
                AddModifier(creator, field);
            }
        }

        private void AddModifier(MultipleModifiersCreatorSO creator, FieldInfo field)
        {
            if (field.FieldType == typeof(int))
                creator.CreateStatModifier(new ModifierConfig<int> { Duration = durationSelected, ModifierType = modifierTypeSelected, ModifierValue = intModifierValueSelected, Name = field.Name });
            else if (field.FieldType == typeof(float))
                creator.CreateStatModifier(new ModifierConfig<float> { Duration = durationSelected, ModifierType = modifierTypeSelected, ModifierValue = floatModifierValueSelected, Name = field.Name });
            else if (field.FieldType == typeof(bool))
                creator.CreateStatModifier(new ModifierConfig<bool> { Duration = durationSelected, ModifierType = modifierTypeSelected, ModifierValue = boolModifierValueSelected, Name = field.Name });
        }
    }

#endif

    [System.Serializable]
    /// <summary>
    /// Class created in order to allow List collection for Modifiers and keep their data serializable (keep data even after recompile)
    /// 
    public class SerializedModifier
    {
        [SerializeReference]
        public StatModifier modifier;

        public SerializedModifier(StatModifier modifier)
        {
            this.modifier = modifier;
        }
    }

    [CreateAssetMenu(menuName = "Topacai/Stats/ModifierSO", fileName = "ModifierSO")]
    public class MultipleModifiersCreatorSO : ScriptableObject
    {
        [SerializeField, HideInInspector]
        private List<SerializedModifier> modifiers = new();
        public IEnumerable<StatModifier> Modifiers => modifiers.Select(m => m.modifier);

#if UNITY_EDITOR

        [SerializeField] private MonoScript ScriptAsset;

        private Type scriptObject;

        public Type ScriptObject => scriptObject;
        public MonoScript GetScriptAsset() => ScriptAsset;

        private void OnValidate()
        {
            if (ScriptAsset == null) return;

            scriptObject = ScriptAsset.GetClass();
        }

#endif

        public void CreateStatModifier(ModifierConfig<int> modifierConfig)
        {
            modifiers.Add(new (new IntModifier(modifierConfig.Duration, modifierConfig.Name, modifierConfig.ModifierType, modifierConfig.ModifierValue)));
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        public void CreateStatModifier(ModifierConfig<float> modifierConfig)
        {
            modifiers.Add(new (new FloatModifier(modifierConfig.Duration, modifierConfig.Name, modifierConfig.ModifierType, modifierConfig.ModifierValue)));
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        public void CreateStatModifier(ModifierConfig<bool> modifierConfig)
        {
            modifiers.Add(new (new BoolModifier(modifierConfig.Duration, modifierConfig.Name, modifierConfig.ModifierType, modifierConfig.ModifierValue)));
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        public void CreateStatModifier<T>(float duration, Func<T, T> operation, string name)
        {
            modifiers.Add(new (new BaseStatModifier<T>(duration, operation, name)));
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }

        public void RemoveStatModifier(StatModifier modifier)
        {
            for (int i = 0; i < modifiers.Count; i++)
            {
                if(modifiers[i].modifier == modifier)
                {
                    modifiers.RemoveAt(i);
                    break;
                }
            }
#if UNITY_EDITOR
            EditorUtility.SetDirty(this);
#endif
        }
    }
}
